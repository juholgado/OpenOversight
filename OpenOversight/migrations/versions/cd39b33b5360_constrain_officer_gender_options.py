"""constrain officer gender options

Revision ID: cd39b33b5360
Revises: 562bd5f1bc1f
Create Date: 2020-07-13 02:45:07.533549

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'cd39b33b5360'
down_revision = '562bd5f1bc1f'
branch_labels = None
depends_on = None

def get_update_statement(normalized, options):
    template = """
    UPDATE officers 
    SET gender = '{normalized}'
    WHERE gender::citext in ({options});
    """
    options = ', '.join(["'" + o + "'" for o in options])
    return template.format(normalized=normalized, options=options)

def upgrade():
    conn = op.get_bind()
    create_extn = "create extension IF NOT EXISTS citext;"
    conn.execute(create_extn)

    genders = {
        "M": ('male', 'm', 'man'),
        "F": ('female', 'f', 'woman'),
        "Other": ('nonbinary', 'other'),
    }

    update_statement = ''

    for normalized, options in genders.items():
        update_statement += get_update_statement(normalized, options)

    conn.execute(update_statement)

    null_query = """
UPDATE officers
SET gender = NULL
WHERE gender not in ('M', 'F', 'Other');
"""
    conn.execute(null_query)

    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('officers', 'gender',
                    existing_type=sa.VARCHAR(length=120),
                    type_=sa.VARCHAR(length=5),
                    existing_nullable=True)
    # ### end Alembic commands ###

    op.create_check_constraint(
        'gender_options',
        'officers',
        "gender in ('M', 'F', 'Other')"
    )


def downgrade():
    op.drop_constraint('gender_options', 'officers', type_='check')

    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('officers', 'gender',
                    existing_type=sa.VARCHAR(length=5),
                    type_=sa.VARCHAR(length=120),
                    existing_nullable=True)
    # ### end Alembic commands ###

